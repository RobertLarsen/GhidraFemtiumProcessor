define endian=big;
define alignment=4;

define space ram type=ram_space size=4 default;
define space register type=register_space size=4;

define register offset=0 size=4 [
    zz
    v0 v1
    a0 a1 a2 a3 a4 a5 a6
    s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19
    t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21
    xr yr zr
    k0 k1
    at0 at1
    ra fp gp sp pc
];

define token instr(32)
    opcode = (27, 31)
    r      = (21, 26)
    x      = (15, 20)
    y      = (9, 14)
    E      = (8, 8)
    o      = (0, 7)
    m      = (5, 8)
    s      = (0, 4)
    i      = (5, 20)
    c      = (0, 3)
    j      = (5, 14)
;

attach variables [ r x y ] [
    zz
    v0 v1
    a0 a1 a2 a3 a4 a5 a6
    s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19
    t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21
    xr yr zr
    k0 k1
    at0 at1
    ra fp gp sp pc
];

#######################
# Pseudo instructions #
#######################
:ret is opcode=0b01000 & r=63 & x=59 & y=0 & o=0 & E=0 {
    pc = ra;
    return [pc];
}
:mv r, x is opcode=0b01000 & r & x & y=0 & o=0 & E=0 {
    r = x;
}
:and r, x is opcode=0b01100 & m=0b1000 & r & x & y=0 & s=0 {
    r = r & x;
}
:or r, x is opcode=0b01100 & m=0b0100 & r & x & y=0 & s=0 {
    r = r | x;
}
# Section "7.4.7. Advanced Constraints" says that this should work:
#:inc r is opcode=0b01000 & E=0 & r & x=r & y=0 & o=1 {
#    r = r + 1;
#}
# But it doesn't

RaConstructor: ra is ra { export ra; }
At0Constructor: at0 is at0 { export at0; }
:addret ra, pc, zz, 0xc is opcode=0b01000 & E=0 & r=59 & x=63 & y=0 & o=0xc & ra & pc & zz & RaConstructor {
    ra = inst_next + 0xc;
}

#:movi at0, number is opcode=0b10000 & r=57 & at0 & i & s & At0Constructor [number=i<<s;] {
#    at0 = number;
#}
#
#:addi at0, number is opcode=0b10001 & r=57 & at0 & i & s & At0Constructor [number=i<<s;] {
#    at0 = at0 + number;
#}

## add 
#:call address is opcode=0b01000 
#               & r
#               & x
#               & y
#               & o
#               & ra
#               & E=0
#               & r=63
#               & x=63
#               & y=57
#               & At0Constructor
#               & RaConstructor
#               & ra=inst_next
#               [address=instr_next+at0+o;]
#               {
#    call address;
#}

##################################
# Memory load/store instructions #
##################################
:ldb r [x + y + o] is opcode=0b00000 & E=0 & r & x & y & o {
    local tgt = x + y + o;
    r = zext(*[ram]:1 tgt);
}
:ldbs r [x + y + o] is opcode=0b00000 & E=1 & r & x & y & o {
    local tgt = x + y + o;
    r = sext(*[ram]:1 tgt);
}
:ldh r [x + y + o] is opcode=0b00001 & E=0 & r & x & y & o {
    local tgt = x + y + o;
    r = zext(*[ram]:2 tgt);
}
:ldhs r [x + y + o] is opcode=0b00001 & E=1 & r & x & y & o {
    local tgt = x + y + o;
    r = sext(*[ram]:2 tgt);
}
:ldw r [x + y + o] is opcode=0b00010 & E=0 & r & x & y & o {
    local tgt = x + y + o;
    r = *[ram]:4 tgt;
}

:stb r [x + y + o] is opcode=0b00100 & E=0 & r & x & y & o {
    local tgt = x + y + o;
    *[ram]:1 tgt = r;
}
:sth r [x + y + o] is opcode=0b00101 & E=0 & r & x & y & o {
    local tgt = x + y + o;
    *[ram]:2 tgt = r;
}
:stw r [x + y + o] is opcode=0b00110 & E=0 & r & x & y & o {
    local tgt = x + y + o;
    *[ram]:4 tgt = r;
}

###########################
# Arithmetic instructions #
###########################
:add r, x, y, o is opcode=0b01000 & E=0 & r & x & y & o {
    r = x + y + o;
}
:mul r, x, y, o is opcode=0b01001 & E=0 & r & x & y & o {
    r = x * (y + o);
}
:div r, x, y, o is opcode=0b01010 & E=0 & r & x & y & o {
    r = x / (y + o);
}
:divi r, x, y, o is opcode=0b01010 & E=1 & r & x & y & o {
    r = x s/ (y + o);
}
:nor r, x, y, o is opcode=0b01011 & E=0 & r & x & y & o {
    r = ~(x | y | o);
}

#######################
# Masking instruction #
#######################
:shl r, x, y, s is opcode=0b01100 & m=0b0000 & r & x & y & s {
    r = x << (y + s);
}
:shr r, x, y, s is opcode=0b01100 & m=0b0001 & r & x & y & s {
    r = x >> (y + s);
}
:sar r, x, y, s is opcode=0b01100 & m=0b0010 & r & x & y & s {
    r = x s>> (y + s);
}
:shlo r, x, y, s is opcode=0b01100 & m=0b0100 & r & x & y & s {
    r = r | (x << (y + s));
}
:shro r, x, y, s is opcode=0b01100 & m=0b0101 & r & x & y & s {
    r = r | (x >> (y + s));
}
:saro r, x, y, s is opcode=0b01100 & m=0b0110 & r & x & y & s {
    r = r | (x s>> (y + s));
}
:shla r, x, y, s is opcode=0b01100 & m=0b1000 & r & x & y & s {
    r = r & (x << (y + s));
}
:shra r, x, y, s is opcode=0b01100 & m=0b1001 & r & x & y & s {
    r = r & (x >> (y + s));
}
:sara r, x, y, s is opcode=0b01100 & m=0b1010 & r & x & y & s {
    r = r & (x s>> (y + s));
}
:shlx r, x, y, s is opcode=0b01100 & m=0b1100 & r & x & y & s {
    r = r ^ (x << (y + s));
}
:shrx r, x, y, s is opcode=0b01100 & m=0b1101 & r & x & y & s {
    r = r ^ (x >> (y + s));
}
:sarx r, x, y, s is opcode=0b01100 & m=0b1110 & r & x & y & s {
    r = r ^ (x s>> (y + s));
}

####################
# Assign immediate #
####################
:movi r, number is opcode=0b10000 & r & i & s [number=i<<s;] {
    r = i << s;
}
:addi r, number is opcode=0b10001 & r & i & s [number=i<<s;] {
    r = r + (i << s);
}

##########################
# Conditional evaluation #
##########################

@define CMP_NZ  "0b0000"
@define CMP_LEU "0b0001"
@define CMP_LTU "0b0010"
@define CMP_EQ  "0b0011"
@define CMP_EZ  "0b0100"
@define CMP_GTU "0b0101"
@define CMP_GEU "0b0110"
@define CMP_NE  "0b0111"
@define CMP_LE  "0b1001"
@define CMP_LT  "0b1010"
@define CMP_GT  "0b1101"
@define CMP_GE  "0b1110"

macro compare(_op, _a, _b, _cmp_res) {
    if (!(_op == $(CMP_NZ))) goto <A>;
    _cmp_res = (_a != 0);
    goto <l>;
    <A>
    if (!(_op == $(CMP_LEU))) goto <B>;
    _cmp_res = (_a <= _b);
    goto <l>;
    <B>
    if (!(_op == $(CMP_LTU))) goto <C>;
    _cmp_res = (_a < _b);
    goto <l>;
    <C>
    if (!(_op == $(CMP_EQ))) goto <D>;
    _cmp_res = (_a == _b);
    goto <l>;
    <D>
    if (!(_op == $(CMP_EZ))) goto <e>;
    _cmp_res = (_a == 0);
    goto <l>;
    <e>
    if (!(_op == $(CMP_GTU))) goto <F>;
    _cmp_res = (_a > _b);
    goto <l>;
    <F>
    if (!(_op == $(CMP_GEU))) goto <G>;
    _cmp_res = (_a >= _b);
    goto <l>;
    <G>
    if (!(_op == $(CMP_NE))) goto <h>;
    _cmp_res = (_a != _b);
    goto <l>;
    <h>
    if (!(_op == $(CMP_LE))) goto <I>;
    _cmp_res = (_a s<= _b);
    goto <l>;
    <I>
    if (!(_op == $(CMP_LT))) goto <J>;
    _cmp_res = (_a s< _b);
    goto <l>;
    <J>
    if (!(_op == $(CMP_GT))) goto <k>;
    _cmp_res = (_a s> _b);
    goto <l>;
    <k>
    if (!(_op == $(CMP_GE))) goto <l>;
    _cmp_res = (_a s>= _b);
    <l>
}

####################
# Conditional move #
####################
:cmnz r, x is opcode=0b10010 & c=$(CMP_NZ) & r & x & y {
    if (!(x != 0)) goto <skip>;
    r = x;
    <skip>
}
:cmleu r, x, y is opcode=0b10010 & c=$(CMP_LEU) & r & x & y {
    if (!(x <= y)) goto <skip>;
    r = x;
    <skip>
}
:cmltu r, x, y is opcode=0b10010 & c=$(CMP_LTU) & r & x & y {
    if (!(x < y)) goto <skip>;
    r = x;
    <skip>
}
:cmeq r, x, y is opcode=0b10010 & c=$(CMP_EQ) & r & x & y {
    if (!(x == y)) goto <skip>;
    r = x;
    <skip>
}
:cmez r, x is opcode=0b10010 & c=$(CMP_EZ) & r & x {
    if (!(x == 0)) goto <skip>;
    r = x;
    <skip>
}
:cmgtu r, x, y is opcode=0b10010 & c=$(CMP_GTU) & r & x & y {
    if (!(x > y)) goto <skip>;
    r = x;
    <skip>
}
:cmgeu r, x, y is opcode=0b10010 & c=$(CMP_GEU) & r & x & y {
    if (!(x >= y)) goto <skip>;
    r = x;
    <skip>
}
:cmne r, x, y is opcode=0b10010 & c=$(CMP_NE) & r & x & y {
    if (!(x != y)) goto <skip>;
    r = x;
    <skip>
}
:cmle r, x, y is opcode=0b10010 & c=$(CMP_LE) & r & x & y {
    if (!(x s<= y)) goto <skip>;
    r = x;
    <skip>
}
:cmlt r, x, y is opcode=0b10010 & c=$(CMP_LT) & r & x & y {
    if (!(x s< y)) goto <skip>;
    r = x;
    <skip>
}
:cmgt r, x, y is opcode=0b10010 & c=$(CMP_GT) & r & x & y {
    if (!(x s> y)) goto <skip>;
    r = x;
    <skip>
}
:cmge r, x, y is opcode=0b10010 & c=$(CMP_GE) & r & x & y {
    if (!(x s>= y)) goto <skip>;
    r = x;
    <skip>
}

########################
# Compare instructions #
########################
:snz r, x is opcode=0b10011 & c=$(CMP_NZ) & r & x & y {
    r = 0;
    if (!(x != 0)) goto <skip>;
    r = 1;
    <skip>
}
:sleu r, x, y is opcode=0b10011 & c=$(CMP_LEU) & r & x & y {
    r = 0;
    if (!(x <= y)) goto <skip>;
    r = 1;
    <skip>
}
:sltu r, x, y is opcode=0b10011 & c=$(CMP_LTU) & r & x & y {
    r = 0;
    if (!(x < y)) goto <skip>;
    r = 1;
    <skip>
}
:seq r, x, y is opcode=0b10011 & c=$(CMP_EQ) & r & x & y {
    r = 0;
    if (!(x == y)) goto <skip>;
    r = 1;
    <skip>
}
:sez r, x is opcode=0b10011 & c=$(CMP_EZ) & r & x {
    r = 0;
    if (!(x == 0)) goto <skip>;
    r = 1;
    <skip>
}
:sgtu r, x, y is opcode=0b10011 & c=$(CMP_GTU) & r & x & y {
    r = 0;
    if (!(x > y)) goto <skip>;
    r = 1;
    <skip>
}
:sgeu r, x, y is opcode=0b10011 & c=$(CMP_GEU) & r & x & y {
    r = 0;
    if (!(x >= y)) goto <skip>;
    r = 1;
    <skip>
}
:sne r, x, y is opcode=0b10011 & c=$(CMP_NE) & r & x & y {
    r = 0;
    if (!(x != y)) goto <skip>;
    r = 1;
    <skip>
}
:sle r, x, y is opcode=0b10011 & c=$(CMP_LE) & r & x & y {
    r = 0;
    if (!(x s<= y)) goto <skip>;
    r = 1;
    <skip>
}
:slt r, x, y is opcode=0b10011 & c=$(CMP_LT) & r & x & y {
    r = 0;
    if (!(x s< y)) goto <skip>;
    r = 1;
    <skip>
}
:sgt r, x, y is opcode=0b10011 & c=$(CMP_GT) & r & x & y {
    r = 0;
    if (!(x s> y)) goto <skip>;
    r = 1;
    <skip>
}
:sge r, x, y is opcode=0b10011 & c=$(CMP_GE) & r & x & y {
    r = 0;
    if (!(x s>= y)) goto <skip>;
    r = 1;
    <skip>
}

######################
# Conditional branch #
######################
JumpTarget: target is j [ target = inst_start + 4 + (j * 4); ] {
    export *:4 target;
}

:bnz r, x JumpTarget is opcode=0b10111 & c=$(CMP_NZ) & r & x & JumpTarget {
    if (!(r != 0)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bleu r, x, JumpTarget is opcode=0b10111 & c=$(CMP_LEU) & r & x & JumpTarget {
    if (!(r <= x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bltu r, x, JumpTarget is opcode=0b10111 & c=$(CMP_LTU) & r & x & JumpTarget {
    if (!(r < x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:beq r, x, JumpTarget is opcode=0b10111 & c=$(CMP_EQ) & r & x & JumpTarget {
    if (!(r == x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bez r, x, JumpTarget is opcode=0b10111 & c=$(CMP_EZ) & r & x & JumpTarget {
    if (!(r == 0)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bgtu r, x, JumpTarget is opcode=0b10111 & c=$(CMP_GTU) & r & x & JumpTarget {
    if (!(r > x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bgeu r, x, JumpTarget is opcode=0b10111 & c=$(CMP_GEU) & r & x & JumpTarget {
    if (!(r >= x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bne r, x, JumpTarget is opcode=0b10111 & c=$(CMP_NE) & r & x & JumpTarget {
    if (!(r != x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:ble r, x, JumpTarget is opcode=0b10111 & c=$(CMP_LE) & r & x & JumpTarget {
    if (!(r s<= x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:blt r, x, JumpTarget is opcode=0b10111 & c=$(CMP_LT) & r & x & JumpTarget {
    if (!(r s< x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bgt r, x, JumpTarget is opcode=0b10111 & c=$(CMP_GT) & r & x & JumpTarget {
    if (!(r s> x)) goto <skip>;
    goto JumpTarget;
    <skip>
}
:bge r, x, JumpTarget is opcode=0b10111 & c=$(CMP_GE) & r & x & JumpTarget {
    if (!(r s>= x)) goto <skip>;
    goto JumpTarget;
    <skip>
}

###############
# Kernel mode #
###############

define pcodeop in;
define pcodeop out;
define pcodeop dskr;
define pcodeop dskw;
define pcodeop sys;
define pcodeop iret;
define pcodeop halt;

:in r, x, y, o is opcode=0b11000 & r & x & y & o {
    in();
}
:out r, x, y, o is opcode=0b11001 & r & x & y & o {
    out();
}
:dskr r, x is opcode=0b11010 & r & x {
    dskr(r, x);
}
:dskw r, x is opcode=0b11011 & r & x {
    dskw(r, x);
}
:sys is opcode=0b11101 {
    sys();
}
:iret is opcode=0b11110 {
    iret();
}
:halt is opcode=0b11111 {
    halt();
}
